@inherits Crm.Library.Modularization.CrmViewUserControl<CrmModelItem<FilterDefinition>>
@using Crm.Library.EntityConfiguration
@using Crm.Library.Extensions
@using Crm.Library.Globalization.Extensions
@using Crm.ViewModels
@{ var filterDefinition = (DropDownFilterDefinition)Model.Item; }
@{var caption = filterDefinition.Caption ?? filterDefinition.PropertyInfo.Name; }
@if (filterDefinition.Items != null && filterDefinition.Items.Count > 0) { 
<div class="filter-element form-group" id="@(filterDefinition.GetModelPath().ToLower().Replace(".", "-") + "-filter")">
	<div class="fg-line select">
		<p class="m-b-5">@(Html.Localize(caption))</p>
		@{
			var modelPath = filterDefinition.GetModelPath();
			var read = $"function() {{ var value = ko.unwrap(this.getFilter(\"{modelPath}\")); return value !== null && value !== undefined && value.Operator ? value.Value : value; }}";
			var write = $"function(newValue) {{ this.getFilter(\"{modelPath}\").extend({{ filterOperator: {{ operator: \"===\", additionalProperties: {{caption: \"{caption}\", displayedValue: window.Helper.getTranslatedString(newValue) }} }} }})(newValue); }}";
			var autocompleteInput = $"ko.pureComputed({{ read: {read}, write: {write} }}, $data)";

			<select name="@(Model.Item.GetModelPath())" class="form-control" data-bind='select2autocompleter: { data: @(filterDefinition.Items.OrderBy(x => ResourceManager.GetTranslation(x.Value) ?? x.Value).Select(x => new { x.Key, Value = ResourceManager.GetTranslation(x.Value) ?? x.Value }).SerializeToJson()), optionsText: "Value", optionsValue: "Key", placeholder: Helper.String.getTranslatedString("All")} ,value: @(autocompleteInput)' ></select>
		}
	</div>
</div>
 } 
