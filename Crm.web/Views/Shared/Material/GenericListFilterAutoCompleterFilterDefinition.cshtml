@inherits Crm.Library.Modularization.CrmViewUserControl<CrmModelItem<FilterDefinition>>
@using System.Text.RegularExpressions
@using Crm.Library.EntityConfiguration
@using Crm.Library.Globalization.Extensions
@using Crm.ViewModels
@{ var filterDefinition = (AutoCompleterFilterDefinition)Model.Item; }
@{ var caption = filterDefinition.Caption ?? filterDefinition.PropertyInfo.Name; }
@if (filterDefinition.TableName != null && (filterDefinition.DisplayProperty != null || filterDefinition.DisplayFunction != null) && filterDefinition.ValueProperty != null && filterDefinition.FilterProperties != null)
	{ 
<div class="filter-element form-group" id="@(filterDefinition.GetModelPath().ToLower().Replace(".", "-") + "-filter")">
	<div class="fg-line">
		<label class="fg-label control-label">@(Html.Localize(caption))</label>
		@{
				var modelPath = filterDefinition.GetModelPath();
				var read = $"function() {{ var value = ko.unwrap(this.getFilter('{modelPath}')); return value !== null && value !== undefined && value.Operator ? value.Value : value; }}";
				var write = $"function(newValue) {{ this.getFilter('{modelPath}').extend({{ filterOperator: {{ operator: '===', additionalProperties: {{caption: '{caption}'}} }} }})(newValue); }}";
				var autocompleteInput = $"ko.pureComputed({{ read: {read}, write: {write} }}, $data)";
				var textFunction = filterDefinition.DisplayProperty != null ? $"o['{filterDefinition.DisplayProperty.Name}']" : $"{filterDefinition.DisplayFunction}(o)";
				var displayMapFunction = $"function (o) {{ return {{ id: o['{filterDefinition.ValueProperty.Name}'], text: {textFunction}, item:o }}; }}";
				var customFilter = filterDefinition.FilterFunction ?? "function(query, term) { if (!term) { return query; } var filterString = " + $"[{String.Join(", ", filterDefinition.FilterProperties.Select(x => $"'{x.Name}'"))}]" + ".map(function(p) { return 'it.' + p + '.contains(this.term) === true'; }).join(' || '); return query.filter(filterString, { term: term }); }";
				var sourceNoSpace = filterDefinition.TableName.Replace(" ", "");
				var source = new Regex("^[a-zA-Z0-9_]+$").IsMatch(filterDefinition.TableName?.Trim()) ? $"'{filterDefinition.TableName}'" : filterDefinition.TableName;
				var joins = filterDefinition.Joins != null ? filterDefinition.Joins : "[]" ;
				var onSelect = $"function (o) {{ if(o){{ $root.getFilter('{filterDefinition.GetModelPath()}')().displayedValue = {textFunction} }} }}";

		<select class="form-control" data-bind="select2autocompleter: { data: @(autocompleteInput), autocompleteOptions: { table: @(source),  mapDisplayObject:@(displayMapFunction), customFilter: @(customFilter), joins: @(joins), onSelect: @(onSelect), placeholder: Helper.String.getTranslatedString('All') } }" >
		</select>
		}
	</div>
</div>
 } 
