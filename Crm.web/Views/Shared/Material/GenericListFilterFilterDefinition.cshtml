@inherits Crm.Library.Modularization.CrmViewUserControl<CrmModelItem<FilterDefinition>>
@using Crm.Library.EntityConfiguration
@using Crm.ViewModels
@using Crm.Library.Extensions
@using Crm.Library.Globalization.Extensions
@using Crm.Library.Globalization.Lookup
@{ if (Model.Item is ICollectionFilterDefinition) return;
}
@{ var caption = Model.Item.Caption ?? Model.Item.PropertyInfo.Name; }
<div class="filter-element form-group" id="@(Model.Item.GetModelPath().ToLower().Replace(".", "-") + "-filter")">
	@{ if (Model.Item.FilterType == typeof(bool)) { 
		var modelPath = Model.Item.GetModelPath();
		var read = $"function() {{ var value = ko.unwrap(this.getFilter('{modelPath}')); return value !== null && value !== undefined && value.Operator ? value.Value : value; }}";
		var write = $"function(newValue) {{ this.getFilter('{modelPath}').extend({{ filterOperator: {{ operator: '==', additionalProperties: {{caption: '{caption}', displayedValue: Helper.String.getTranslatedString($root.booleanOptions.filter((option) => {{return option.Value === newValue;}})[0].Text)}} }} }})(newValue); }}";
		var data = $"ko.pureComputed({{ read: {read}, write: {write} }}, $data)";
		<div class="fg-line select">
			<p class="m-b-5">@(Html.Localize(caption))</p>
			<select name="@(Model.Item.GetModelPath())" data-bind="value: @(data), options: booleanOptions, optionsValue: 'Value', optionsText: function(x) { return Helper.String.getTranslatedString(x.Text); }" class="form-control">
			</select>
		</div>
	 }
	   else if (Model.Item.FilterType.Inherits<ILookup>()) {
			var filterTypeName = PluginProvider.FindPluginDescriptor(Model.Item.FilterType).PluginName.Replace(".",String.Empty).Replace("CrmLibrary","Main")+"_"+ Model.Item.FilterType.Name;
			var modelPathKey = Model.Item.GetModelPath()+"Key";
			var read = $"function() {{ var value = ko.unwrap(this.getFilter('{modelPathKey}')); value = value && value.Operator ? value.Value : value; value = Array.isArray(value) ? value : [value]; return value.filter(x => x !== null); }}";
			var write = $"function(newValue) {{ this.getFilter('{modelPathKey}').extend({{ filterOperator: {{ operator: 'in', additionalProperties: {{caption: '{caption}', getDisplayedValue: (keys) => this.getDisplayedValueFromLookups('{filterTypeName}', keys) }} }} }})(newValue); }}";
			var select2Data = $"ko.pureComputed({{ read: {read}, write: {write} }}, $data)";
			var getAutoCompleteOptions = $"function() {{ let options = Helper.Lookup.getAutocompleteOptions('{filterTypeName}'); " +
				$"if($root.{filterTypeName}CustomFilter && options.customFilter){{" +
				$" options.customFilter = $root.{filterTypeName}CustomFilter.bind($root) }} " +
				$"return options; }}";
	<div class="fg-line select">
		<p class="m-b-5">@(Html.Localize(caption))</p>
		<select name="@(Model.Item.GetModelPath())" class="form-control" multiple="multiple" data-bind="select2autocompleter: { data: @(select2Data),
	autocompleteOptions: @(getAutoCompleteOptions)(), placeholder: Helper.String.getTranslatedString('All')
}"></select>
	</div>
	 } else { 
		var modelPath = Model.Item.GetModelPath();
		var read = $"function() {{ var value = ko.unwrap(this.getFilter('{modelPath}')); return value !== null && value !== undefined && value.Operator ? value.Value : value; }}";
		var write = $"function(newValue) {{ this.getFilter('{modelPath}').extend({{ filterOperator: {{ operator: 'contains', additionalProperties: {{caption: '{caption}', displayedValue: newValue}} }} }})(newValue); }}";
		var data = $"ko.pureComputed({{ read: {read}, write: {write} }}, $data)";
	<div class="fg-line">
		<label class="fg-label control-label">@(Html.Localize(caption))</label>
		<input name="@(Model.Item.GetModelPath())" type="text" class="form-control" data-bind="value: @(data) ">
	</div>
	 } }
</div>
